//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.InterviewAssistant.Entities.Client
{
    
    
    public class Device : object
    {
        
        private int _deviceId;
        
        private System.DateTime _lastUpdate;
        
        private int _lastLogitude;
        
        private int _lastLatitude;
        
        private bool _active;
        
        public int deviceId
        {
            get
            {
                return _deviceId;
            }
            set
            {
                _deviceId = value;
            }
        }
        
        public System.DateTime lastUpdate
        {
            get
            {
                return _lastUpdate;
            }
            set
            {
                _lastUpdate = value;
            }
        }
        
        public int lastLogitude
        {
            get
            {
                return _lastLogitude;
            }
            set
            {
                _lastLogitude = value;
            }
        }
        
        public int lastLatitude
        {
            get
            {
                return _lastLatitude;
            }
            set
            {
                _lastLatitude = value;
            }
        }
        
        public bool active
        {
            get
            {
                return _active;
            }
            set
            {
                _active = value;
            }
        }
    }
    
    public class DeviceInterviewer : object
    {
        
        private int _deviceInterviewerId;
        
        private Web.InterviewAssistant.Entities.Client.Interviewer _interviewer;
        
        private Web.InterviewAssistant.Entities.Client.Device _device;
        
        private short _status;
        
        public int deviceInterviewerId
        {
            get
            {
                return _deviceInterviewerId;
            }
            set
            {
                _deviceInterviewerId = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Interviewer interviewer
        {
            get
            {
                return _interviewer;
            }
            set
            {
                _interviewer = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Device device
        {
            get
            {
                return _device;
            }
            set
            {
                _device = value;
            }
        }
        
        public short status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
    }
    
    public class Interview : object
    {
        
        private int _interviewId;
        
        private bool _verifyAge;
        
        private string _dateStart;
        
        private string _dateFinish;
        
        private bool _viewerFound;
        
        private bool _viewerAccept;
        
        private bool _useSus;
        
        private short _idProcedure;
        
        private bool _procedureHospital;
        
        private short _IDHospital;
        
        private string _otherHospital;
        
        private bool _useMedicalPlan;
        
        private short _IDProblemWithPlan;
        
        private short _IDSickness;
        
        private short _needGetBetter;
        
        private short _qualityOfSus;
        
        private string _otherImprovement;
        
        private short _IDOcupation;
        
        private string _otherOcupation;
        
        private short _degreeSchool;
        
        private short _liveWith;
        
        private string _otherDweller;
        
        private bool _hasChildren;
        
        private short _religion;
        
        private short _aboutElection;
        
        private bool _willVote;
        
        private short _howSelectCandidate;
        
        private bool _whatTheyDo;
        
        private short _describePoliticJob;
        
        private bool _knowSuperSimples;
        
        private bool _funcAposentado;
        
        private bool _aposentada;
        
        private short _motivoDesemprego;
        
        private short _desemSelec;
        
        private short _respDesempenho;
        
        public int interviewId
        {
            get
            {
                return _interviewId;
            }
            set
            {
                _interviewId = value;
            }
        }
        
        public bool verifyAge
        {
            get
            {
                return _verifyAge;
            }
            set
            {
                _verifyAge = value;
            }
        }
        
        public string dateStart
        {
            get
            {
                return _dateStart;
            }
            set
            {
                _dateStart = value;
            }
        }
        
        public string dateFinish
        {
            get
            {
                return _dateFinish;
            }
            set
            {
                _dateFinish = value;
            }
        }
        
        public bool viewerFound
        {
            get
            {
                return _viewerFound;
            }
            set
            {
                _viewerFound = value;
            }
        }
        
        public bool viewerAccept
        {
            get
            {
                return _viewerAccept;
            }
            set
            {
                _viewerAccept = value;
            }
        }
        
        public bool useSus
        {
            get
            {
                return _useSus;
            }
            set
            {
                _useSus = value;
            }
        }
        
        public short idProcedure
        {
            get
            {
                return _idProcedure;
            }
            set
            {
                _idProcedure = value;
            }
        }
        
        public bool procedureHospital
        {
            get
            {
                return _procedureHospital;
            }
            set
            {
                _procedureHospital = value;
            }
        }
        
        public short IDHospital
        {
            get
            {
                return _IDHospital;
            }
            set
            {
                _IDHospital = value;
            }
        }
        
        public string otherHospital
        {
            get
            {
                return _otherHospital;
            }
            set
            {
                _otherHospital = value;
            }
        }
        
        public bool useMedicalPlan
        {
            get
            {
                return _useMedicalPlan;
            }
            set
            {
                _useMedicalPlan = value;
            }
        }
        
        public short IDProblemWithPlan
        {
            get
            {
                return _IDProblemWithPlan;
            }
            set
            {
                _IDProblemWithPlan = value;
            }
        }
        
        public short IDSickness
        {
            get
            {
                return _IDSickness;
            }
            set
            {
                _IDSickness = value;
            }
        }
        
        public short needGetBetter
        {
            get
            {
                return _needGetBetter;
            }
            set
            {
                _needGetBetter = value;
            }
        }
        
        public short qualityOfSus
        {
            get
            {
                return _qualityOfSus;
            }
            set
            {
                _qualityOfSus = value;
            }
        }
        
        public string otherImprovement
        {
            get
            {
                return _otherImprovement;
            }
            set
            {
                _otherImprovement = value;
            }
        }
        
        public short IDOcupation
        {
            get
            {
                return _IDOcupation;
            }
            set
            {
                _IDOcupation = value;
            }
        }
        
        public string otherOcupation
        {
            get
            {
                return _otherOcupation;
            }
            set
            {
                _otherOcupation = value;
            }
        }
        
        public short degreeSchool
        {
            get
            {
                return _degreeSchool;
            }
            set
            {
                _degreeSchool = value;
            }
        }
        
        public short liveWith
        {
            get
            {
                return _liveWith;
            }
            set
            {
                _liveWith = value;
            }
        }
        
        public string otherDweller
        {
            get
            {
                return _otherDweller;
            }
            set
            {
                _otherDweller = value;
            }
        }
        
        public bool hasChildren
        {
            get
            {
                return _hasChildren;
            }
            set
            {
                _hasChildren = value;
            }
        }
        
        public short religion
        {
            get
            {
                return _religion;
            }
            set
            {
                _religion = value;
            }
        }
        
        public short aboutElection
        {
            get
            {
                return _aboutElection;
            }
            set
            {
                _aboutElection = value;
            }
        }
        
        public bool willVote
        {
            get
            {
                return _willVote;
            }
            set
            {
                _willVote = value;
            }
        }
        
        public short howSelectCandidate
        {
            get
            {
                return _howSelectCandidate;
            }
            set
            {
                _howSelectCandidate = value;
            }
        }
        
        public bool whatTheyDo
        {
            get
            {
                return _whatTheyDo;
            }
            set
            {
                _whatTheyDo = value;
            }
        }
        
        public short describePoliticJob
        {
            get
            {
                return _describePoliticJob;
            }
            set
            {
                _describePoliticJob = value;
            }
        }
        
        public bool knowSuperSimples
        {
            get
            {
                return _knowSuperSimples;
            }
            set
            {
                _knowSuperSimples = value;
            }
        }
        
        public bool funcAposentado
        {
            get
            {
                return _funcAposentado;
            }
            set
            {
                _funcAposentado = value;
            }
        }
        
        public bool aposentada
        {
            get
            {
                return _aposentada;
            }
            set
            {
                _aposentada = value;
            }
        }
        
        public short motivoDesemprego
        {
            get
            {
                return _motivoDesemprego;
            }
            set
            {
                _motivoDesemprego = value;
            }
        }
        
        public short desemSelec
        {
            get
            {
                return _desemSelec;
            }
            set
            {
                _desemSelec = value;
            }
        }
        
        public short respDesempenho
        {
            get
            {
                return _respDesempenho;
            }
            set
            {
                _respDesempenho = value;
            }
        }
    }
    
    public class Interviewed : object
    {
        
        private int _interviewedId;
        
        private string _name;
        
        private string _addres;
        
        private string _tel;
        
        public int interviewedId
        {
            get
            {
                return _interviewedId;
            }
            set
            {
                _interviewedId = value;
            }
        }
        
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string addres
        {
            get
            {
                return _addres;
            }
            set
            {
                _addres = value;
            }
        }
        
        public string tel
        {
            get
            {
                return _tel;
            }
            set
            {
                _tel = value;
            }
        }
    }
    
    public class InterviewerInterviewed : object
    {
        
        private int _intervieweInterviewedId;
        
        private Web.InterviewAssistant.Entities.Client.Interview _interview;
        
        private Web.InterviewAssistant.Entities.Client.Interviewed _interviewed;
        
        private Web.InterviewAssistant.Entities.Client.Interviewer _interviewer;
        
        private System.DateTime _Date;
        
        private short _status;
        
        public int intervieweInterviewedId
        {
            get
            {
                return _intervieweInterviewedId;
            }
            set
            {
                _intervieweInterviewedId = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Interview interview
        {
            get
            {
                return _interview;
            }
            set
            {
                _interview = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Interviewed interviewed
        {
            get
            {
                return _interviewed;
            }
            set
            {
                _interviewed = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Interviewer interviewer
        {
            get
            {
                return _interviewer;
            }
            set
            {
                _interviewer = value;
            }
        }
        
        public System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                _Date = value;
            }
        }
        
        public short status
        {
            get
            {
                return _status;
            }
            set
            {
                _status = value;
            }
        }
    }
    
    public class Interviewer : object
    {
        
        private int _interviewerId;
        
        private string _name;
        
        public int interviewerId
        {
            get
            {
                return _interviewerId;
            }
            set
            {
                _interviewerId = value;
            }
        }
        
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    }
    
    public class Letter : object
    {
        
        private int _letterId;
        
        private Web.InterviewAssistant.Entities.Client.Interview _interview;
        
        public int letterId
        {
            get
            {
                return _letterId;
            }
            set
            {
                _letterId = value;
            }
        }
        
        public Web.InterviewAssistant.Entities.Client.Interview interview
        {
            get
            {
                return _interview;
            }
            set
            {
                _interview = value;
            }
        }
    }
    
    public class RegisterLog : object
    {
        
        private int _registerLogId;
        
        private short _type;
        
        private string _Message;
        
        public int registerLogId
        {
            get
            {
                return _registerLogId;
            }
            set
            {
                _registerLogId = value;
            }
        }
        
        public short type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
        
        public string Message
        {
            get
            {
                return _Message;
            }
            set
            {
                _Message = value;
            }
        }
    }
    
    public class User : object
    {
        
        private int _userId;
        
        private string _name;
        
        private string _login;
        
        private string _password;
        
        public int userId
        {
            get
            {
                return _userId;
            }
            set
            {
                _userId = value;
            }
        }
        
        public string name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
        
        public string login
        {
            get
            {
                return _login;
            }
            set
            {
                _login = value;
            }
        }
        
        public string password
        {
            get
            {
                return _password;
            }
            set
            {
                _password = value;
            }
        }
    }
}
namespace Web.InterviewAssistant.Api.Controllers.Client
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Newtonsoft.Json;


    public partial class Account
    {

        private System.Net.Http.HttpClient client;

        private System.Uri baseUri;

        public Account(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }

        /// <summary>
        /// 
        /// GET api/Account/UserInfo
        /// </summary>
        public async Task<Web.InterviewAssistant.Api.Models.UserInfoViewModel> GetUserInfoAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/Account/UserInfo");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.UserInfoViewModel>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Account/UserInfo
        /// </summary>
        public Web.InterviewAssistant.Api.Models.UserInfoViewModel GetUserInfo()
        {
            var requestUri = new Uri(this.baseUri, "api/Account/UserInfo");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.UserInfoViewModel>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/Logout
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> LogoutAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/Account/Logout");
            var responseMessage = await client.PostAsync(requestUri, new StringContent(String.Empty));
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }

        /// <summary>
        /// 
        /// POST api/Account/Logout
        /// </summary>
        public System.Net.Http.HttpResponseMessage Logout()
        {
            var requestUri = new Uri(this.baseUri, "api/Account/Logout");
            var responseMessage = this.client.PostAsync(requestUri, new StringContent(String.Empty)).Result;
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }

        /// <summary>
        /// 
        /// GET api/Account/ManageInfo?returnUrl={returnUrl}&generateState={generateState}
        /// </summary>
        public async Task<Web.InterviewAssistant.Api.Models.ManageInfoViewModel> GetManageInfoAsync(string returnUrl, bool generateState)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ManageInfo?returnUrl=" + Uri.EscapeDataString(returnUrl) + "&generateState=" + generateState);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.ManageInfoViewModel>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Account/ManageInfo?returnUrl={returnUrl}&generateState={generateState}
        /// </summary>
        public Web.InterviewAssistant.Api.Models.ManageInfoViewModel GetManageInfo(string returnUrl, bool generateState)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ManageInfo?returnUrl=" + Uri.EscapeDataString(returnUrl) + "&generateState=" + generateState);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.ManageInfoViewModel>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/ChangePassword
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> ChangePasswordAsync(Web.InterviewAssistant.Api.Models.ChangePasswordBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ChangePassword");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/ChangePassword
        /// </summary>
        public System.Net.Http.HttpResponseMessage ChangePassword(Web.InterviewAssistant.Api.Models.ChangePasswordBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ChangePassword");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/SetPassword
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> SetPasswordAsync(Web.InterviewAssistant.Api.Models.SetPasswordBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/SetPassword");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/SetPassword
        /// </summary>
        public System.Net.Http.HttpResponseMessage SetPassword(Web.InterviewAssistant.Api.Models.SetPasswordBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/SetPassword");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/AddExternalLogin
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> AddExternalLoginAsync(Web.InterviewAssistant.Api.Models.AddExternalLoginBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/AddExternalLogin");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/AddExternalLogin
        /// </summary>
        public System.Net.Http.HttpResponseMessage AddExternalLogin(Web.InterviewAssistant.Api.Models.AddExternalLoginBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/AddExternalLogin");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/RemoveLogin
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> RemoveLoginAsync(Web.InterviewAssistant.Api.Models.RemoveLoginBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/RemoveLogin");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/RemoveLogin
        /// </summary>
        public System.Net.Http.HttpResponseMessage RemoveLogin(Web.InterviewAssistant.Api.Models.RemoveLoginBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/RemoveLogin");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// GET api/Account/ExternalLogin?provider={provider}&error={error}
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> GetExternalLoginAsync(string provider, string error)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ExternalLogin?provider=" + Uri.EscapeDataString(provider) + "&error=" + Uri.EscapeDataString(error));
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }

        /// <summary>
        /// 
        /// GET api/Account/ExternalLogin?provider={provider}&error={error}
        /// </summary>
        public System.Net.Http.HttpResponseMessage GetExternalLogin(string provider, string error)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ExternalLogin?provider=" + Uri.EscapeDataString(provider) + "&error=" + Uri.EscapeDataString(error));
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            return responseMessage;
        }

        /// <summary>
        /// 
        /// GET api/Account/ExternalLogins?returnUrl={returnUrl}&generateState={generateState}
        /// </summary>
        public async Task<Web.InterviewAssistant.Api.Models.ExternalLoginViewModel[]> GetExternalLoginsAsync(string returnUrl, bool generateState)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ExternalLogins?returnUrl=" + Uri.EscapeDataString(returnUrl) + "&generateState=" + generateState);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.ExternalLoginViewModel[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Account/ExternalLogins?returnUrl={returnUrl}&generateState={generateState}
        /// </summary>
        public Web.InterviewAssistant.Api.Models.ExternalLoginViewModel[] GetExternalLogins(string returnUrl, bool generateState)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/ExternalLogins?returnUrl=" + Uri.EscapeDataString(returnUrl) + "&generateState=" + generateState);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Api.Models.ExternalLoginViewModel[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/Register
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> RegisterAsync(Web.InterviewAssistant.Api.Models.RegisterBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/Register");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/Register
        /// </summary>
        public System.Net.Http.HttpResponseMessage Register(Web.InterviewAssistant.Api.Models.RegisterBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/Register");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/RegisterExternal
        /// </summary>
        public async Task<System.Net.Http.HttpResponseMessage> RegisterExternalAsync(Web.InterviewAssistant.Api.Models.RegisterExternalBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/RegisterExternal");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }

        /// <summary>
        /// 
        /// POST api/Account/RegisterExternal
        /// </summary>
        public System.Net.Http.HttpResponseMessage RegisterExternal(Web.InterviewAssistant.Api.Models.RegisterExternalBindingModel model)
        {
            var requestUri = new Uri(this.baseUri, "api/Account/RegisterExternal");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, model);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                return responseMessage;
            }
        }
    }

    public partial class Interviews
    {

        private System.Net.Http.HttpClient client;

        private System.Uri baseUri;

        public Interviews(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }

        /// <summary>
        /// 
        /// GET api/Interviews
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.Interview[]> GetInterviewsAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Interviews
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.Interview[] GetInterviews()
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Interviews/{id}
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.Interview> GetInterviewAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Interviews/{id}
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.Interview GetInterview(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// PUT api/Interviews/{id}
        /// </summary>
        public async Task PutInterviewAsync(int id, Web.InterviewAssistant.Entities.Client.Interview interview)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, interview);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PutAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                var stream = await responseMessage.Content.ReadAsStreamAsync();
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                }
            }
        }

        /// <summary>
        /// 
        /// PUT api/Interviews/{id}
        /// </summary>
        public void PutInterview(int id, Web.InterviewAssistant.Entities.Client.Interview interview)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, interview);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PutAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                var stream = responseMessage.Content.ReadAsStreamAsync().Result;
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                }
            }
        }

        /// <summary>
        /// 
        /// POST api/Interviews
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.Interview> PostInterviewAsync(Web.InterviewAssistant.Entities.Client.Interview interview)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, interview);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                var stream = await responseMessage.Content.ReadAsStreamAsync();
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                    return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
                }
            }
        }

        /// <summary>
        /// 
        /// POST api/Interviews
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.Interview PostInterview(Web.InterviewAssistant.Entities.Client.Interview interview)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, interview);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                var stream = responseMessage.Content.ReadAsStreamAsync().Result;
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                    return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
                }
            }
        }

        /// <summary>
        /// 
        /// DELETE api/Interviews/{id}
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.Interview> DeleteInterviewAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// DELETE api/Interviews/{id}
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.Interview DeleteInterview(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Interviews/" + id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.Interview>(jsonReader);
            }
        }
    }

    public partial class RegisterLogs
    {

        private System.Net.Http.HttpClient client;

        private System.Uri baseUri;

        public RegisterLogs(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }

        /// <summary>
        /// 
        /// GET api/RegisterLogs
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.RegisterLog[]> GetRegisterLogsAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/RegisterLogs
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.RegisterLog[] GetRegisterLogs()
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/RegisterLogs/{id}
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.RegisterLog> GetRegisterLogAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/RegisterLogs/{id}
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.RegisterLog GetRegisterLog(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// PUT api/RegisterLogs/{id}
        /// </summary>
        public async Task PutRegisterLogAsync(int id, Web.InterviewAssistant.Entities.Client.RegisterLog registerLog)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, registerLog);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PutAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                var stream = await responseMessage.Content.ReadAsStreamAsync();
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                }
            }
        }

        /// <summary>
        /// 
        /// PUT api/RegisterLogs/{id}
        /// </summary>
        public void PutRegisterLog(int id, Web.InterviewAssistant.Entities.Client.RegisterLog registerLog)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, registerLog);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PutAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                var stream = responseMessage.Content.ReadAsStreamAsync().Result;
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                }
            }
        }

        /// <summary>
        /// 
        /// POST api/RegisterLogs
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.RegisterLog> PostRegisterLogAsync(Web.InterviewAssistant.Entities.Client.RegisterLog registerLog)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, registerLog);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
                var stream = await responseMessage.Content.ReadAsStreamAsync();
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                    return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
                }
            }
        }

        /// <summary>
        /// 
        /// POST api/RegisterLogs
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.RegisterLog PostRegisterLog(Web.InterviewAssistant.Entities.Client.RegisterLog registerLog)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, registerLog);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
                var stream = responseMessage.Content.ReadAsStreamAsync().Result;
                using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
                {
                    var serializer = new JsonSerializer();
                    return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
                }
            }
        }

        /// <summary>
        /// 
        /// DELETE api/RegisterLogs/{id}
        /// </summary>
        public async Task<Web.InterviewAssistant.Entities.Client.RegisterLog> DeleteRegisterLogAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// DELETE api/RegisterLogs/{id}
        /// </summary>
        public Web.InterviewAssistant.Entities.Client.RegisterLog DeleteRegisterLog(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/RegisterLogs/" + id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<Web.InterviewAssistant.Entities.Client.RegisterLog>(jsonReader);
            }
        }
    }

    public partial class Values
    {

        private System.Net.Http.HttpClient client;

        private System.Uri baseUri;

        public Values(System.Net.Http.HttpClient client, System.Uri baseUri)
        {
            if (client == null)
                throw new ArgumentNullException("client", "Null HttpClient.");

            if (baseUri == null)
                throw new ArgumentNullException("baseUri", "Null baseUri");

            this.client = client;
            this.baseUri = baseUri;
        }

        /// <summary>
        /// 
        /// GET api/Values
        /// </summary>
        public async Task<string[]> GetAsync()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<string[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Values
        /// </summary>
        public string[] Get()
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<string[]>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Values/{id}
        /// </summary>
        public async Task<string> GetAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            var responseMessage = await client.GetAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
            var stream = await responseMessage.Content.ReadAsStreamAsync();
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<string>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// GET api/Values/{id}
        /// </summary>
        public string Get(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            var responseMessage = this.client.GetAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
            var stream = responseMessage.Content.ReadAsStreamAsync().Result;
            using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
            {
                var serializer = new JsonSerializer();
                return serializer.Deserialize<string>(jsonReader);
            }
        }

        /// <summary>
        /// 
        /// POST api/Values
        /// </summary>
        public async Task PostAsync(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, value);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PostAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
            }
        }

        /// <summary>
        /// 
        /// POST api/Values
        /// </summary>
        public void Post(string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values");
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, value);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PostAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
            }
        }

        /// <summary>
        /// 
        /// PUT api/Values/{id}
        /// </summary>
        public async Task PutAsync(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, value);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = await client.PutAsync(requestUri, content);
                responseMessage.EnsureSuccessStatusCode();
            }
        }

        /// <summary>
        /// 
        /// PUT api/Values/{id}
        /// </summary>
        public void Put(int id, string value)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            using (var requestWriter = new System.IO.StringWriter())
            {
                var requestSerializer = JsonSerializer.Create();
                requestSerializer.Serialize(requestWriter, value);
                var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
                var responseMessage = this.client.PutAsync(requestUri, content).Result;
                responseMessage.EnsureSuccessStatusCode();
            }
        }

        /// <summary>
        /// 
        /// DELETE api/Values/{id}
        /// </summary>
        public async Task DeleteAsync(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            var responseMessage = await client.DeleteAsync(requestUri);
            responseMessage.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// 
        /// DELETE api/Values/{id}
        /// </summary>
        public void Delete(int id)
        {
            var requestUri = new Uri(this.baseUri, "api/Values/" + id);
            var responseMessage = this.client.DeleteAsync(requestUri).Result;
            responseMessage.EnsureSuccessStatusCode();
        }
    }
}
